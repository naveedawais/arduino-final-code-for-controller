// include the EduIntro library
#include <EduIntro.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <SPI.h>
#include <MFRC522.h>
#include <Keypad.h>
#include "DFRobot_PH.h"
#include "DFRobot_EC.h"
#include <EEPROM.h>
/*int PHuprelay=true;
int PHdownrelay=true;
int ECuprelay=true;
int ECdownrelay=true;   */
//---------------------------------------------------------------------------------------------------------------------------------//
#define EC_PIN A0
  int buzzer = 11;
  int fanrelay= 42;
  int PHuprelay = 47; //P1 PHup
int PHdownrelay = 44; //P2 PHdown
int ECuprelay = 48; //P3 ECup
int ECdownrelay = 43; //P4 ECdown

int minEC = '4.99';
int maxEC = '5.99' ;
int upper = '6.00';
DHT11 dht11(7);
int Temperature;
float F;
String Humidity;
float m = 0.024;
float b = -2.6;

//----------------------------------------------------------------------------------------------------------------------------------//
// HUMIDITY VARIABLES
String password="80"; //Variable to store the current humidity
String tempPassword=""; //Variable to store the input humidity
int doublecheck;    //Check twice the entered humidity value
boolean armed = false;  //Variable for system state (armed:true / unarmed:false)
boolean input_pass;   //Variable for input password (correct:true / wrong:false)
boolean storedPassword = true;
boolean changedPassword = false;
boolean checkPassword = false;
int i = 1; //variable to index an array
//-------------------------------------------------------------------------------------------------------------------------------------------//

float x = analogRead(A1); //int

float y = m * x + b  ;
// ------------------------------------------------------------------------------------------------------------------------------------ //
//PH VARIABLES
String initialPH="7"; //Variable to store the current ph
String tempPH=""; //Variable to store the input ph
int doublecheckPH;    //Check twice the entered ph value
boolean armedPH = false;  //Variable for system state (armed:true / unarmed:false)
boolean input_PH;   //Variable for input password (correct:true / wrong:false)
boolean storedPH = true;
boolean changedPH = false;
boolean checkPH = false;
int jk = atoi(initialPH);
float desiredPH = jk ; 

//------------------------------------------------------------------------------------------------------//


LiquidCrystal_I2C lcd(0x27, 20, 4); // i2c adress for lcd
#define SS_PIN 53
#define RST_PIN 5

float  voltagePH, voltageEC, phValue, ecValue, temperature = 25;
DFRobot_PH ph;
DFRobot_EC ec;

MFRC522 mfrc522(SS_PIN, RST_PIN);
byte degree[8] = {
  0b01100,
  0b10010,
  0b10010,
  0b01100,
  0b00000,
  0b00000,
  0b00000,
  0b00000
};

const byte rows = 4; //number of the keypad's rows and columns
const byte cols = 4;

char keyMap [rows] [cols] = { //define the cymbols on the buttons of the keypad

  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', '.'}
};

byte rowPins [rows] = {37, 35, 33, 31}; //pins of the keypad
byte colPins [cols] = {29, 27, 25, 23};



Keypad myKeypad = Keypad( makeKeymap(keyMap), rowPins, colPins, rows, cols);




//--------------------------------------------------------------------------------------------------------------------------------------------------------//
// Reading the humidity index
//void humiwriting()
//{
//
//   int h = int(Humidity);
//   dht11.update();
//    while(Humidity = dht11.readHumidity()){
//    Serial.write(h);
//  delay(3000);
//    } 
//  return;
//       
//}
void commands(){

//  Serial.print("initial ph:");
//  Serial.println(initialPH);
//  Serial.print("Desried ph:");
//  Serial.println(desiredPH);
//  Serial.print("jk:");
//  Serial.println(jk);


 if(Humidity > password) {
    digitalWrite(42,LOW);
    Serial.println("humidity fan Runing!");  
  }

  else 
  {
    digitalWrite(42,HIGH);
  }
// ----------------------------------------------
// if(y>14){                             
//      lcd.setCursor(9,3);       
//      lcd.print("No sensor!");           
//      Serial.println("PH sensor not connected!");
//      delay(1000);     
//      lcd.setCursor(9,3);   
//      lcd.print("           ");
//      delay(100);    
//    }
//    if(y<0){
//      lcd.setCursor(10,3);
//      lcd.print("No sensor!");
//      delay(1000);
//      lcd.setCursor(10,3);
//      lcd.print("          ");
//      delay(100);
//       }

//    if (y > desiredPH && y < 14 )                 
//         {
//  
//      digitalWrite(44, LOW);          
//      delay(500);               
//      digitalWrite(44, HIGH);
//      delay(10000);
//      Serial.println("pump 2 is Lowering the PH");
//          
// }
// if (y < desiredPH && y > 0  )
//    {
//      digitalWrite(47, LOW);
//      delay(500);
//      digitalWrite(47, HIGH);
//      delay(10000);
//      Serial.println("pump 1 is Raising the PH");
//      Serial.println(initialPH);
//    }
//    if ( y == desiredPH ) 
//    {
//      digitalWrite(47, HIGH);
//
//      digitalWrite(44, HIGH);
//    }

}
void mainscreen()
{
main:


  lcd.createChar(1, degree);
  dht11.update();
  Temperature = dht11.readCelsius();       
  Humidity = dht11.readHumidity();

  // Print the collected data in a row on the Serial Monitor

  lcd.setCursor(0, 0);
  lcd.print("Humidity: ");
  lcd.print(Humidity);
  lcd.print("%");
  Serial.print("Humidity: ");
  Serial.print(Humidity);
  Serial.println("%");

delay(500);

  lcd.setCursor(0, 1);
  lcd.print("Temperature: ");
  lcd.print(Temperature);
  lcd.write(1);
  lcd.print("C");
  Serial.print("Temperature: ");
  Serial.print(Temperature);
  Serial.println(" Centigrade");

//  digitalWrite(47, HIGH);
//  digitalWrite(48, HIGH);
//  digitalWrite(44, HIGH);
//  digitalWrite(43, HIGH);

  char keypressed = myKeypad.getKey();
  if (keypressed == '0' || keypressed == '1' || keypressed == '2' || keypressed == '3' ||
      keypressed == '4' || keypressed == '5' || keypressed == '6' || keypressed == '7' ||
      keypressed == '8' || keypressed == '9' || keypressed == 'A' || keypressed == 'B' ||
      keypressed == 'C' || keypressed == '.' || keypressed == '*' || keypressed == '#' ) {
    lcd.clear();
    buzzerfalse();
    lcd.setCursor(0, 0);
    lcd.print("Keypad not Activated");
    lcd.setCursor(0, 2);
    lcd.print("Please read card!");
    delay(1500);
    lcd.clear();
    goto main;


  } 
}
void PHEC()
{

  // PH eC calculations
  char cmd[10];
  static unsigned long timepoint = millis();
  if (millis() - timepoint > 700U) {                      //time interval: 1s
    /*timepoint = millis();
      //temperature = readTemperature();                   // read your temperature sensor to execute temperature compensation
      voltagePH = analogRead(PH_PIN) / 1024.0 * 5000;      // read the ph voltage
      phValue    = ph.readPH(voltagePH, temperature);      // convert voltage to pH with temperature compensation
      Serial.print("pH:");
      Serial.print(phValue, 2);
      lcd.setCursor(0, 3);
      lcd.print("pH:");
      lcd.print(phValue, 2);
      delay(100);            */
    PH:
    float x = analogRead(A1); // float
    float y = m * x + b  ;
    Serial.print("pH:");
    Serial.println(y, 3);
    lcd.setCursor(0, 3);
    lcd.print("pH:");
    lcd.print(y, 2);
    delay(700);

    }

  //Ec calculations:

    voltageEC = analogRead(EC_PIN) / 1024.0 * 5000;
    ecValue    = ec.readEC(voltageEC, temperature);      // convert voltage to EC with temperature compensation
    Serial.print("EC:");
    Serial.print(ecValue, 2);
    Serial.println("ms/cm");
    lcd.setCursor(0, 2);
    lcd.print("EC:");
    lcd.print(ecValue, 2);
    lcd.print("mS/cm");

    if (( ecValue < 5 && ecValue >= 1  ))
    {
      digitalWrite(47, LOW);          // minEC=2 ,maxEC=10, thresEC=5 //
      delay(500);                      /*            int minEC = '4.99';  int maxEC = '5.99' ; int upper = '6.00';  */
      digitalWrite(47, HIGH);
      delay(10000);
    }
    if (ecValue == 0 ) {
      digitalWrite(47, HIGH);

      digitalWrite(43, HIGH);
      Serial.println("EC probe not connected!");

    }
    if ( ecValue == 5 && maxEC >= ecValue, 2 >= minEC ) {

      digitalWrite(47, HIGH);

      digitalWrite(43, HIGH);

    }
    if (ecValue > 6  )
    {
      digitalWrite(43, LOW);
      delay(500);
      digitalWrite(43, HIGH);
      delay(10000);
    }





  if (readSerial(cmd)) {
    strupr(cmd);
    if (strstr(cmd, "PH")) {
      ph.calibration(voltagePH, temperature, cmd);     //PH calibration process by Serail CMD
    }
    if (strstr(cmd, "EC")) {
      ec.calibration(voltageEC, temperature, cmd);     //EC calibration process by Serail CMD
    }
  }
}

 // int i = 0;
bool readSerial(char result[]) {
  while (Serial.available() > 0) {
    char inChar = Serial.read();
    if (inChar == '\n') {
      result[i] = '\0';
      Serial.flush();
      i = 0;
      return true;
    }
    if (inChar != '\r') {
      result[i] = inChar;
      i++;
    }
    delay(1);
  }
  return false;

}
//--------------------------------------------------------------------------------------------------------------------------------------// 
  // RFID READING AND PRINTING
void rfid()
{
  if ( ! mfrc522.PICC_IsNewCardPresent())
  {
    return;
  }
  // Select one of the cards
  if ( ! mfrc522.PICC_ReadCardSerial())
  {
    return;
  }
  //Show UID on serial monitor
  Serial.print("UID tag :");
  String content = "";
  byte letter;
  for (byte i = 0; i < mfrc522.uid.size; i++)
  {
    Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
    Serial.print(mfrc522.uid.uidByte[i], HEX);
    content.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
    content.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  Serial.println();
  Serial.println("Message : setting opened ");
  content.toUpperCase();

  if (content.substring(1) = "04 2F 35 B2 98 5B 80" || "04 68 78 F2 0F 52 80" ) // only card can access for now
  {
    buzzertrue();
    lcd.clear();
    delay(300);
    do {
      Control();
    } while (content.substring(1) == "04 2F 35 B2 98 5B 80" || "04 68 78 F2 0F 52 80"  );
  }
  else   {

    Serial.println(" Access denied");
    lcd.clear();
    buzzerfalse();
    lcd.setCursor(0, 0);
    lcd.print("Access Denied!");
    delay(900);
    lcd.clear();
    return; //goto label

  }
}
//-------------------------------------------------------------------------------------------------------------------------------------------------//
//MAIN SETTING SCREEN
void Control()
{
controlmain:
  lcd.setCursor(0, 0);
  lcd.print("Press 'A' for PH");
  lcd.setCursor(0, 1);
  lcd.print("Press 'B' for EC");
  lcd.setCursor(0, 2);
  lcd.print("Press 'C' for others");
  lcd.setCursor(0, 3);
  lcd.print("Press '#' to Return");


  char keypressed = myKeypad.getKey();

  if (keypressed == '0' || keypressed == '1' || keypressed == '2' || keypressed == '3' ||
      keypressed == '4' || keypressed == '5' || keypressed == '6' || keypressed == '7' ||
      keypressed == '8' || keypressed == '9' || keypressed == '.' ||
      keypressed == '*') {

    lcd.clear();
    buzzerfalse();
    lcd.setCursor(0, 0);
    lcd.print("Invalid Selection");
    lcd.setCursor(0, 2);
    lcd.print("Please select Again");
    delay(1500);
    lcd.clear();
    goto controlmain;
    //Button tone
  }
  else if (keypressed == 'A') {
    lcd.clear();
    Serial.println("'A' pressed");
    lcd.setCursor(0, 0);
    tone(buzzer,800,200);
    lcd.print("PH selected!");
    Serial.println("PH control opened!");
    delay(800);
    lcd.clear();
    do {
      PHcontrol();
    } while (keypressed == 'A');

  }
  else if (keypressed == 'B') {
    lcd.clear();
     Serial.println("'B' pressed");
    tone(buzzer,800,200);
    lcd.setCursor(0, 0);
    lcd.print("EC selected!");
    Serial.println("EC control opened!");
    delay(800);
    lcd.clear();

    do {
      ECcontrol();
    } while (keypressed == 'B');
 }
 else if (keypressed == 'C') {
    lcd.clear();
     Serial.println("'C' pressed");
    tone(buzzer,800,200);
    lcd.setCursor(0, 0);
    lcd.print("others selected!");
    Serial.println("others setting opened!");
    delay(800);
    lcd.clear();

    do {
      Others();
    } while (keypressed == 'C');
 }
  else if (keypressed == '#') {   
    lcd.clear();
    Serial.println("# pressed");
    Serial.println("back to main screen");
    do {
      loop();
    }
    while (keypressed  == '#');

  }
}
//--------------------------------------------------------------------------------------------------------------------------------------------------------------//
//PH changing CODE//
void PHcontrol()
{ 
    char keypressed = myKeypad.getKey();

  do {
  moto: //goto label
  tempPH="";
  lcd.clear();
  i=6;
  noTone(buzzer);



  while(!checkPH){
    lcd.setCursor(0,0);
    lcd.print("Press A to change");
    lcd.setCursor(0,1);
    lcd.print("PH settings!");

    float m = 0.024;
    float b = -2.6;

       int x = analogRead(A1);

     int y = m * x + b ;

  lcd.setCursor(0, 3);
  lcd.print("Live PH is: ");
  lcd.print(y,1);
  delay(10);


 char keypressed = myKeypad.getKey();   //Read pressed keys
    if (keypressed != NO_KEY){    //Accept only numbers and * from keypad
      if (keypressed == '0' || keypressed == '1' || keypressed == '2' || keypressed == '3' ||
      keypressed == '4' || keypressed == '5' || keypressed == '6' || keypressed == '7' ||
      keypressed == '8' || keypressed == '9' || keypressed == '.' ){
        tempPH += keypressed;
        lcd.setCursor(i,1);
        lcd.print(keypressed);       //printing
        i++;
        tone(buzzer,800,200);   //Button tone
      }
      else if (keypressed == 'A'){
        changePH();
        goto moto;
      }
      else if (keypressed=='#'){
      lcd.clear();
     Serial.println("# pressed");
    Serial.println("back to main screen");
    do {
        loop();
    }
    while (keypressed  == '#');
    }
      else if (keypressed == '*'){  //Check for password
        if (initialPH==tempPH){//If it's correct...
          lcd.clear();      
          lcd.setCursor(0,0);
          lcd.print("Accepted");
          lcd.setCursor(0,1);
          lcd.print("PH saved");
          tone(buzzer,100);   
          //unlock the door for 5 seconds
          delay(5000);
          goto moto;
        }
        else{           //if it's false, retry
          tempPH="";
          tone(buzzer,500,200);
          delay(300);
          tone(buzzer,500,200);
          delay(300);
          goto moto;
        }
      }
    }
  }   

    lcd.setCursor(0, 3);
    lcd.print("Press '#' to Return");


  }
  while(keypressed == 'A');

}
//CONTINUES
// PH changing CODE 
//Change current PH
void changePH(){
  retry: //label for goto
  tempPH="";
  lcd.clear();
  i=1;
  while(!changedPH){        //Waiting for current password
   char keypressed = myKeypad.getKey();   //Read pressed keys
    lcd.setCursor(0,0);
    lcd.print("CURRENT threshold");
    lcd.setCursor(0,1);
    lcd.print(">");
    if (keypressed != NO_KEY){
      if (keypressed == '0' || keypressed == '1' || keypressed == '2' || keypressed == '3' ||
      keypressed == '4' || keypressed == '5' || keypressed == '6' || keypressed == '7' ||
      keypressed == '8' || keypressed == '9' || keypressed == '.' ){
        tempPH += keypressed;
        lcd.setCursor(i,1);
        lcd.print(keypressed);
        i++;
        tone(buzzer,800,200);       
      }
      else if (keypressed=='#'){
        break;
      }
      else if (keypressed == '*'){
        i=1;
        if (initialPH==tempPH){

          storedPH=false;
          tone(buzzer,500,200);
          newPH();          
          break;
        }
        else{               //Try again
          tempPH="";
          tone(buzzer,500,200);
          delay(300);
          tone(buzzer,500,200);
          delay(300);
          goto retry;
        }
      }
    }
  }
}
//CONTINUES
String firstPH;
//Setup new password
void newPH(){
  tempPH="";
  changedPH=false;
  lcd.clear();
  i=1;
  while(!storedPH){
    char keypressed = myKeypad.getKey();   //Read pressed keys
    if (doublecheckPH==0){
      lcd.setCursor(0,0);
      lcd.print("Enter new value");
      lcd.setCursor(0,1);
      lcd.print(">");
    }
    else{
      lcd.setCursor(0,0);
      lcd.print("One more time...");
      lcd.setCursor(0,1);
      lcd.print(">");
    }
    if (keypressed != NO_KEY){
      if (keypressed == '0' || keypressed == '1' || keypressed == '2' || keypressed == '3' ||
      keypressed == '4' || keypressed == '5' || keypressed == '6' || keypressed == '7' ||
      keypressed == '8' || keypressed == '9'  || keypressed == '.'){
        tempPH += keypressed;
        lcd.setCursor(i,1);
        lcd.print(keypressed);
        i++;
          tone(buzzer,800,200);
      }
      else if (keypressed=='#'){
        break;
      }
      else if (keypressed == '*'){
        if (doublecheckPH == 0){
          firstPH=tempPH;
          doublecheckPH=1;
          newPH();
        }
        if (doublecheckPH==1){
          doublecheckPH=0;
          if (firstPH==tempPH){
            i=1;
            firstPH="";
            initialPH = tempPH; // New password saved
            tempPH="";//erase temp password
            lcd.clear();
            lcd.setCursor(0,0);
            lcd.print("Saving");
            lcd.setCursor(7,0);
            lcd.print(".");
            delay(400);
            lcd.setCursor(8,0);
            lcd.print(".");
            delay(400);
            lcd.setCursor(9,0);
            lcd.print(".");
            delay(400);
            lcd.setCursor(0,2);
            lcd.print("Successfull!");

              storedPH=true;
              tone(buzzer,500,400);
              delay(2000);
              lcd.clear();
              break;
          }
          else{
            firstPH="";
            newPH();
          }
        }
      } 
    }
  }
}

//----------------------------------------------------------------------------------------------------------------------------------------//
void ECcontrol()
{
  char keypressed = myKeypad.getKey();
    voltageEC = analogRead(EC_PIN) / 1024.0 * 5000;
    ecValue    = ec.readEC(voltageEC, temperature); 

  do {

    lcd.setCursor(0, 0);
    lcd.print("Please Enter the EC");
    lcd.setCursor(0, 1);
    lcd.print("New EC >");
    lcd.setCursor(0, 2);
    lcd.print("Current EC is:");
    lcd.print(ecValue,1);
    lcd.print("mS");
    lcd.setCursor(0, 3);
    lcd.print("Press '#' to Return");
  }
  while (keypressed == 'B');

   if (keypressed == '#')
    {
      lcd.clear();
      Serial.println("# pressed");
    Serial.println("back to main screen");
    do {
      loop();
    }
    while (keypressed  == '#');
    }
}
//--------------------------------------------------------------------------------------------------------------------------------------------//

//HUMIDITY CHANGING CODE
//Change current password
void changePassword(){
  retry: //label for goto
  tempPassword="";
  lcd.clear();
  i=1;
  while(!changedPassword){        //Waiting for current password
   char keypressed = myKeypad.getKey();   //Read pressed keys
    lcd.setCursor(0,0);
    lcd.print("CURRENT threshold");
    lcd.setCursor(0,1);
    lcd.print(">");
    if (keypressed != NO_KEY){
      if (keypressed == '0' || keypressed == '1' || keypressed == '2' || keypressed == '3' ||
      keypressed == '4' || keypressed == '5' || keypressed == '6' || keypressed == '7' ||
      keypressed == '8' || keypressed == '9' || keypressed == '.'){
        tempPassword += keypressed;
        lcd.setCursor(i,1);
        lcd.print(keypressed);
        i++;
        tone(buzzer,800,200);       
      }
      else if (keypressed=='#'){
        break;
      }
      else if (keypressed == '*'){
        i=1;
        if (password==tempPassword){
          Serial.print(password);
          storedPassword=false;
          tone(buzzer,500,200);
          newPassword();         
          break;
        }
        else{               //Try again
          tempPassword="";
          tone(buzzer,500,200);
          delay(300);
          tone(buzzer,500,200);
          delay(300);
          goto retry;
        }
      }
    }
  }
}
//CONTINUES
String firstpass;
//Setup new password
void newPassword(){
  tempPassword="";
  changedPassword=false;
  lcd.clear();
  i=1;
  while(!storedPassword){
    char keypressed = myKeypad.getKey();   //Read pressed keys
    if (doublecheck==0){
      lcd.setCursor(0,0);
      lcd.print("Enter new value");
      lcd.setCursor(0,1);
      lcd.print(">");
    }
    else{
      lcd.setCursor(0,0);
      lcd.print("One more time...");
      lcd.setCursor(0,1);
      lcd.print(">");
    }
    if (keypressed != NO_KEY){
      if (keypressed == '0' || keypressed == '1' || keypressed == '2' || keypressed == '3' ||
      keypressed == '4' || keypressed == '5' || keypressed == '6' || keypressed == '7' ||
      keypressed == '8' || keypressed == '9' || keypressed == '.' ){
        tempPassword += keypressed;
        lcd.setCursor(i,1);
        lcd.print(keypressed);
        i++;
          tone(buzzer,800,200);
      }
      else if (keypressed=='#'){
        break;
      }
      else if (keypressed == '*'){
        if (doublecheck == 0){
          firstpass=tempPassword;
          doublecheck=1;
          newPassword();
        }
        if (doublecheck==1){
          doublecheck=0;
          if (firstpass==tempPassword){
            i=1;
            firstpass="";
            password = tempPassword; // New password saved
            tempPassword="";//erase temp password
            lcd.clear();
            lcd.setCursor(0,0);
            lcd.print("Saving");
            lcd.setCursor(7,0);
            lcd.print(".");
            delay(400);
            lcd.setCursor(8,0);
            lcd.print(".");
            delay(400);
            lcd.setCursor(9,0);
            lcd.print(".");
            delay(400);
            lcd.setCursor(0,2);
            lcd.print("Successfull!");

              storedPassword=true;
              tone(buzzer,500,400);
              delay(2000);
              lcd.clear();
              break;
          }
          else{
            firstpass="";
            newPassword();
          }
        }
      } 
    }
  }
}
//CONTINUES
  void Others()
{  
  char keypressed = myKeypad.getKey();

  dht11.update(); 
  moto: //goto label
  tempPassword="";
  lcd.clear();
  i=6;
  noTone(buzzer);



  while(!checkPassword){
    lcd.setCursor(0,0);
    lcd.print("Press A to change");
    lcd.setCursor(0,1);
    lcd.print("humidity settings");
    lcd.setCursor(0,2);
    lcd.print("'#' = Return");


    dht11.update();
  Temperature = dht11.readCelsius();       
  Humidity = dht11.readHumidity();



  lcd.setCursor(0, 3);
  lcd.print("Live Humidity: ");
  lcd.print(Humidity);
  lcd.print("%");
  delay(10);


    keypressed = myKeypad.getKey();   //Read pressed keys
    if (keypressed != NO_KEY){    //Accept only numbers and * from keypad
      if (keypressed == '0' || keypressed == '1' || keypressed == '2' || keypressed == '3' ||
      keypressed == '4' || keypressed == '5' || keypressed == '6' || keypressed == '7' ||
      keypressed == '8' || keypressed == '9' || keypressed == '.'  ){
        tempPassword += keypressed;
        lcd.setCursor(i,1);
        lcd.print(keypressed);       //printing
        i++;
        tone(buzzer,800,200);   //Button tone
      }
      else if (keypressed == 'A'){
        changePassword();
        goto moto;
      }
      else if (keypressed=='#'){
        break;
      }
      else if (keypressed == '*'){  //Check for password
        if (password==tempPassword){//If it's correct...
          lcd.clear();      
          lcd.setCursor(0,0);
          lcd.print("Accepted");
          lcd.setCursor(0,1);
          lcd.print("humidity saved");
          tone(buzzer,100); 
          //unlock the door for 5 seconds
          delay(5000);
          goto moto;
        }
        else{           //if it's false, retry
          tempPassword="";
          tone(buzzer,500,200);
          delay(300);
          tone(buzzer,500,200);
          delay(300);
          goto moto;
        }
      }
    }
  }

  if (keypressed == '#')
    {
      lcd.clear();
     Serial.println("# pressed");
    Serial.println("back to main screen");
    do {
      loop();
    }
    while (keypressed  == '#');
    }  
} 
//-------------------------------------------------------------------------------------------------------------------------------------------//
//tune indication
void buzzertrue()
{
  tone(buzzer, 800);
  delay(75);
  noTone(buzzer);
  delay(75);
  tone(buzzer, 800);
  delay(75);
  noTone(buzzer);
  delay(75);
}

void buzzerfalse()
{
  tone(buzzer, 500);
  delay(75);
  noTone(buzzer);
  delay(75);
  tone(buzzer, 500);
  delay(75);
  noTone(buzzer);
  delay(75);
  tone(buzzer, 500);
  delay(75);
  noTone(buzzer);
  delay(75);
}

//-----------------------------------------------------------------------------------------------------------------------------------//
//SETUP Settings
void setup()
{
  // Initiate a serial communication
  SPI.begin();      // Initiate  SPI bus

  pinMode(9, OUTPUT);
  pinMode(7, INPUT); //dht11
  pinMode(10, OUTPUT);
  pinMode(47, OUTPUT); //p1
  pinMode(44, OUTPUT); //p2
  pinMode(48, OUTPUT); //p3
  pinMode(43, OUTPUT); //p4
  pinMode(42, OUTPUT); // humidity fan
   pinMode(11, OUTPUT); // buzzer

 digitalWrite(PHuprelay,HIGH);
 digitalWrite(PHdownrelay,HIGH);
 digitalWrite(ECuprelay,HIGH);
 digitalWrite(ECdownrelay,HIGH);   
 digitalWrite(fanrelay,HIGH);

  lcd.init();
  lcd.backlight();
  mfrc522.PCD_Init();
  Serial.begin(115200);
  ph.begin();
  ec.begin();


}
//----------------------------------------------------------------------------------------------------------------------------//
void loop()
{ 
  mfrc522.PCD_Init();
  rfid();
  mainscreen();
  PHEC();
  commands();
// humiwriting();
}
//------------------------------------------------------------------------------------------------------------------------------//
